# Generated by Django 5.1 on 2024-08-27 21:43

import django.db.models.deletion
from django.db import migrations, models

import datetime

def forward_func(apps, schema):
    Notes = apps.get_model("notes", "Notes")
    Reminders = apps.get_model("notes", "Reminders")
    Goals = apps.get_model("notes", "Goals")
    Day = apps.get_model("notes", "Day")
    Month = apps.get_model("notes", "Month")

    for note in Notes.objects.all():
        note.date_planned = note.date.date()
        month = note.date.date().replace(day=1)
        day = note.date.date().day
        month_obj, bool = Month.objects.get_or_create(month=month, state=False)
        day_obj, bool = Day.objects.get_or_create(day=day, month=month_obj, state=False, num_notes=0, num_notes_completed=0)
        note.day = day_obj
        if(datetime.datetime.now(datetime.timezone.utc).date()>note.date.date()):
            note.state = True
            day_obj.state=True
            day_obj.save()
        if(day_obj.num_notes):
            day_obj.num_notes = 1
        else:
            day_obj.num_notes +=1
        if not note.done:
            pass
        elif day_obj.num_notes_completed:
            day_obj.num_notes_completed +=1
        else:
            day_obj.num_notes_completed = 1
        note.save()

    for reminder in Reminders.objects.all():
        reminder.date_planned = reminder.date.date()
        reminder.dead_line = reminder.date.time()
        month = reminder.date.date().replace(day=1)
        day = reminder.date.date().day
        month_obj, bool = Month.objects.get_or_create(month=month, state=False)
        day_obj, bool = Day.objects.get_or_create(day=day, month=month_obj, state=False, num_notes=0, num_notes_completed=0)
        reminder.day = day_obj

        dead_line_date = datetime.datetime(year=month.year, month=month.month, day=day,
        hour=reminder.dead_line.hour, tzinfo=datetime.timezone.utc)

        if(datetime.datetime.now(datetime.timezone.utc)>dead_line_date):
            reminder.state = True
            day_obj.save()
        if(day_obj.num_notes):
            day_obj.num_notes = 1
        else:
            day_obj.num_notes +=1
        if not reminder.state:
            pass
        elif day_obj.num_notes_completed:
            day_obj.num_notes_completed +=1
        else:
            day_obj.num_notes_completed = 1
        reminder.save()
    
    for goal in Goals.objects.all():
        goal.date_planned = goal.date.date()
        month = goal.date.date().replace(day=1)
        month_obj, bool = Month.objects.get_or_create(month=month, state=False)
        goal.Month = month_obj
        now = datetime.datetime.now(datetime.timezone.utc)
        if(now.date()>goal.date_planned):
            goal.state = True
            month_obj.state=True
        goal.save()



class Migration(migrations.Migration):

    dependencies = [
        ('notes', '0007_day_month_goals_date_planned_notes_date_planned_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='goals',
            name='date_planned',
            field=models.DateField(default='1111-11-11'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='notes',
            name='date_planned',
            field=models.DateField(default='1111-11-11'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='reminders',
            name='date_planned',
            field=models.DateField(default='1111-11-11'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='notes',
            name='day',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='notes.day'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='reminders',
            name='day',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='notes.day'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='day',
            name='month',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notes.month'),
        ),
        migrations.AddField(
            model_name='goals',
            name='Month',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='notes.month'),
            preserve_default=False,
        ),
        migrations.RunPython(forward_func),
    ]
